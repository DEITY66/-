1.函数问题
（1）
#include <stdio.h>
int fun(int a,int b)
{
int c=(a%10)*1000+(b%10)*100+(a/10)*10+b/10;     //将a的十位和个位依次存放在c数的十位和千位上，b的十位和个位依次存放在c数的个位和百位上
return c;
}

int main() {
int a;
int b;
printf("请输入第一个两位数a:");
scanf("%d",&a);
printf("请输入第二个两位数b:");
scanf("%d",&b);
int c=fun(a,b);
printf("结果为:%d",c);
return 0;
}


（2）
#include <stdio.h>
void fun(int a,int b,int &c)
{
c=(a%10)*1000+(b%10)*100+(a/10)*10+b/10;     //将a的十位和个位依次存放在c数的十位和千位上，b的十位和个位依次存放在c数的个位和百位上

}

int main() {
int a;
int b;
printf("请输入第一个两位数a:");
scanf("%d",&a);
printf("请输入第二个两位数b:");
scanf("%d",&b);
int c;
fun(a,b,c);
printf("结果为:%d",c);
return 0;
}

（3）
#include <stdio.h>
void fun(int a,int b,long *c)
{
*c=(a%10)*1000+(b%10)*100+(a/10)*10+b/10;     //将a的十位和个位依次存放在c数的十位和千位上，b的十位和个位依次存放在c数的个位和百位上

}

int main() {
int a;
int b;
printf("请输入第一个两位数a:");
scanf("%d",&a);
printf("请输入第二个两位数b:");
scanf("%d",&b);
long c;
fun(a,b,&c);
printf("结果为:%d",c);
return 0;
}

2.线性表问题
（1）
#include <iostream>
using namespace std;
struct Monkey
{
    int num;  //猴子的编号
    struct Monkey *next; //下一只猴子
};
 
int main()
{
    int m,n,i,j,king;
    Monkey *head, *p1,*p2;
    cin>>m>>n;
    if(n==1)
    {
        king=m;
    }
    else
    {
        //建立猴子围成的圆圈
        p1=p2=new Monkey;
        head = p1;
        p1->num=1;
        for(i=1; i<m; i++)  //其余m-1只猴子
        {
            p1=new Monkey;  //p1是新增加的
            p1->num=i+1;
            p2->next=p1;
            p2=p1;          //p2总是上一只
        }
        p2->next=head;      //最后一只再指向第一只，成了一个圆圈
 
        //下面要开始数了
        p1=head;
        for(i=1; i<m; i++)  //循环m-1次，淘汰m-1只猴子
        {
            //从p1开始，数n-1只就找到第n只了
            for(j=1; j<n-1; j++)  //实际先找到第n-1只，下一只将是被淘汰的
                p1=p1->next;    //围成圈的，可能再开始从第一只数，如果还未被淘汰的话
 
            //找到了，
            p2=p1->next;  //p2将被删除
            //cout<<"第"<<i<<"轮淘汰"<<p2->num<<endl;   //可以这样观察中间结果
            p1->next=p2->next;  //p2就这样被“架空了”
            p1=p2->next;  //下一轮数数的新起点
            delete p2;  //将不在链表中的结点放弃掉
        }
        king=p1->num;
        delete p1;
    }
    cout<<"猴子大王是："<<king<<endl;
    return 0;
}


（2）
#include <iostream>
using namespace std;

int main()
{
    int N, K=1,M,p;
    cin >> M >> N;
	if(N==1)
	{
		p=(M+1);
	}
	else
	{
    int *a = new int[M + 1];
    fill(a, a + M + 1, 0);

    //num为约瑟夫环剩余人数，count为所报数
     p=K;
    int  count = 0, num = M;
    while (num)
    {
        //未出环的猴子参与报数，当count是N时出环
        if (a[p] != -1 && ++count == N)
        {
            count = 0;
            a[p] = -1; //将已出环的人标记为-1
            num--;
           
        }
        
        p++;                 //指针指向下一个人
        p = (p - 1) % M + 1; //p范围转成[1,M]
		
    };
	}
	
	cout<<"猴子大王是："<<p-1<<" ";
    return 0;
	
}

3.排序问题
#include<iostream>
using namespace std;
int n,i,a[301],b,c,d[301],j,e[301],f[301];
/*a数组为语文成绩，f数组为用来比较的成绩，e数组为没变化
准备输出的成绩*/
int main()
{ cin>>n;
for(i=1;i<=n;i++)
e[i]=i;//给e数组赋值（序号）
for(i=1;i<=n;i++){
cin>>a[i]>>b>>c;//输入各科成绩
f[i]=d[i]=a[i]+b+c;//f，d数组来存放总成绩
}
for(i=1;i<n;i++)
for(j=i+1;j<=n;j++)
if(d[i]<d[j]||(d[i]==d[j]&&a[i]<a[j])) {
//总分少或者总分一样，语文少，交换
swap(d[i],d[j]);swap(a[i],a[j]);swap(e[i],e[j]);}
cout<<e[1]<<" "<<f[e[1]];//输出
for(i=2;i<=5;i++){
cout<<endl<<e[i]<<" "<<f[e[i]];
}
return 0;
}
  

4.字符串问题
#include <iostream>
#include<string>
using namespace std;


class Flu{
    char value;
    //行
    int row;
    //int 列
    int column;
public:
    const char &getValue() const {
        return value;
    }

    void setValue(const char &value) {
        Flu::value = value;
    }

    int getRow() const {
        return row;
    }

    void setRow(int row) {
        Flu::row = row;
    }

    int getColumn() const {
        return column;
    }

    void setColumn(int column) {
        Flu::column = column;
    }

};
//地图输出
void outMap(Flu flu[], int M, int N){
    for (int k = 0, endlNum = 0; k < M*N; ++k) {
        cout << flu[k].getValue();
        endlNum++;
        if (endlNum == M) {
            cout << endl;
            endlNum = 0;
        }
    }
}
//感染人群
void FluOther(Flu flu[], int M, int N){
    int newFluRow[4];
    int newFluColumn[4];
    for (int l = 0; l < M*N; ++l) {
        if (flu[l].getValue() == 'X'){
            newFluRow[0] = flu[l].getRow() + 1;
            newFluColumn[0] = flu[l].getColumn();
            newFluRow[1] = flu[l].getRow() - 1;
            newFluColumn[1] = flu[l].getColumn();
            newFluRow[2] = flu[l].getRow();
            newFluColumn[2] = flu[l].getColumn()+1;
            newFluRow[3] = flu[l].getRow();
            newFluColumn[3] = flu[l].getColumn()-1;
            for (int m = 0; m < 4; ++m) {
                cout << newFluRow[m];
                cout << " " << newFluColumn[m] << endl;
            }
            //把每次感染的设成V(非X) 在主程序中再将V换成X
            for (int i = 0; i < M*N; ++i) {
                if (flu[i].getColumn() == newFluColumn[0] && flu[i].getRow() == newFluRow[0] && flu[i].getValue()!='P'){
                    if (flu[i].getValue()=='X')
                        continue;
                    flu[i].setValue('V');
                }
                if (flu[i].getColumn() == newFluColumn[1] && flu[i].getRow() == newFluRow[1] && flu[i].getValue()!='P'){
                    if (flu[i].getValue()=='X')
                        continue;
                    flu[i].setValue('V');
                }
                if (flu[i].getColumn() == newFluColumn[2] && flu[i].getRow() == newFluRow[2]&& flu[i].getValue()!='P'){
                    if (flu[i].getValue()=='X')
                        continue;
                    flu[i].setValue('V');
                }
                if (flu[i].getColumn() == newFluColumn[3] && flu[i].getRow() == newFluRow[3]&& flu[i].getValue()!='P'){
                    if (flu[i].getValue()=='X')
                        continue;
                    flu[i].setValue('V');
                }
            }
        }
    }

}
int main(){
    cout << "字符串问题" << endl;
    int M, N;
    int freq;
    cin >> M >> N;
    cout << endl;
    Flu flu[99];
    string s;
    for (int i = 0; i < N; ++i) {
        cin >> s;
        //创建对象存储每个点的位置和感染情况 M 即为长度
        for (int j = 0; j < M; ++j) {
            flu[i*(M)+j].setRow(i);
            flu[i*(M)+j].setColumn(j);
            flu[i*(M)+j].setValue(s[j]);
        }
    }
    cin >> freq;
    //地图输出
    outMap(flu, M, N);
    //此时X的个数
    for (int k = freq; k > 0; --k) {
        FluOther(flu, M,N);

        for (int i = 0; i < M*N; ++i) {
            if(flu[i].getValue()=='V')
                flu[i].setValue('X');
        }
        outMap(flu, M, N);
    }

    return 0;
}



5.栈问题
#include<stdio.h>
#include<string.h>
#define MaxSize 100 
 
typedef struct CharStack				//字符栈 
{
	char data[MaxSize];
	int top;
}cStack;
 
typedef struct DoubleStack				//数据栈 
{
	double data[MaxSize];
	int top;
}dStack;
 
int Isop(char );				//当前扫描元素优先级 
int Inop(char );				//栈顶元素优先级 
 
void Initc(cStack *);				//初始化字符栈 
int Pushc(cStack *,char);			//字符栈压栈 
char Gettopc(cStack *);				//返回栈顶元素 
char Popc(cStack *);				//出栈 
 
void Initd(dStack *);				//初始化数据栈 
int Pushd(dStack *,double);			//数据压栈 
double Popd(dStack *);				//出栈 
 
void Trans(char*s1,char*s2);		        //转化为后缀表达式 
 
double Calculate(char *s2);			//后缀表达式求值 
 
 
 
 
 
int main()
{
	char s1[MaxSize];			//用于存储前缀表达式 
	char s2[MaxSize];			//用于存储转换后的表达式 
	printf("请输入表达式:");
	scanf("%s",s1);
	
	Trans(s1,s2);				//处理字符串，并转化为后缀表达式,存放在s2中 
	
	printf("计算结果为: %f",Calculate(s2));		//后缀表达式求值 
	
		
	return 0;
}
 
//初始化 
void Initc(cStack *s1)
{
	s1->top=-1;
}
 
 //字符栈压栈 
 int Pushc(cStack *c1,char op)
 {
 	if(c1->top<MaxSize)
 	{
 		c1->data[++c1->top]=op;
 		return 1;
	}
	else return 0;
}
 
//GET栈顶元素 
char Gettopc(cStack *c1)
{
	return c1->data[c1->top];
}
 
//字符栈出栈 
char Popc(cStack *c1)
{
	return c1->data[c1->top--];
}
 
//初始化数据栈 
void Initd(dStack *d1)
{
	d1->top=-1;
}
 
//数据栈压栈 
int Pushd(dStack *d1,double data)
{
	if(d1->top<MaxSize)
	{
		d1->data[++d1->top]=data;
		return 1;
	}
	else return 0;
}
 
//数据栈出栈 
double Popd(dStack *d1)
{
	return d1->data[d1->top--];
}
 
int Isop(char op)		//当前扫描运算符优先级
{
	switch(op)
	{
		case '(': return 6;
		case '+': case '-': return 2;
		case '*': case '/': return 4;
	}
}
int Inop(char op)		//当前扫描运算符优先级
{
	switch(op)
	{
		case '(': return 1;
		case '+': case '-': return 3;
		case '*': case '/': return 5;
	}
}
 
void Trans(char *s1,char *s2)
{
	int i=0;
	int j=0;
	int flag1=-1;				//flag1为0表示上次输出为数字，flag1为1表示上次输出为字符
	int flag2=-1; 				//flag2为0表示上次扫描为数字，flag为1表示上次扫描为运算符，用于区分数字后加空格
	cStack st1;				//暂放运算符 
	Initc(&st1);
	
	while(s1[i]!='\0')			//处理负数 
	{
		if(s1[0]=='-')			//第一位数字为负数时 
		{
			j=strlen(s1);
			while(j>0)
			{
				s1[j+5]=s1[j];
				j--;
			}
			s1[j++]='(';
			s1[j++]='0';
			s1[j++]='-';
			s1[j++]='1';
			s1[j++]=')';
			s1[j]='*';
			
		}
		if(s1[i]=='('&&s1[i+1]=='-')	//非第一位负数时 
		{
			j=strlen(s1);
			while(j>i+1)
			{
				s1[j+5]=s1[j];
				j--;
			}
			s1[j++]='(';
			s1[j++]='0';
			s1[j++]='-';
			s1[j++]='1';
			s1[j++]=')';
			s1[j]='*';
			i=i+5;
		}
		i++;
	}
	
	i=0;
	j=0;
	while(s1[i]!='\0')
	{
		if(flag1==0&&flag2==1)		//若上次的输出为数字，上次循环扫描为字符，则表示该数字串结束，则在数字后加空格区分 
		{
			s2[j++]=' ';
			flag1=1; 
		}
		if(s1[i]>='0'&&s1[i]<='9'||s1[i]=='.')
		{
			s2[j++]=s1[i];
			flag2=0;
			flag1=0;
		}
		else if(s1[i]=='+'||s1[i]=='-'||s1[i]=='*'||s1[i]=='/'||s1[i]=='(')
		{
			flag2=1;
			if(st1.top<0||Isop(s1[i])>Inop(Gettopc(&st1)))
			{
				Pushc(&st1,s1[i]);
			}
			else
			{
				while(st1.top>=0&&Isop(s1[i])<Inop(Gettopc(&st1)))		//当前扫描字符优先级不断与栈顶字符优先级比较，当前字符小于栈顶字符时退栈并输出 
				{
						s2[j++]=Popc(&st1);
						flag1=1;
				}
				if(st1.top<0||Isop(s1[i])>Inop(Gettopc(&st1)))			//当前字符优先级大于栈顶优先级或栈空时当前字符压入字符栈内 
				{
					Pushc(&st1,s1[i]);
				}
				
			}
		}
		else if(s1[i]==')')				 
		{
			flag2=1;
			if(Gettopc(&st1)!='(')		//若括号仅包含数字则没有输出运算符 
			{
				flag1=1;
			}
			while(Gettopc(&st1)!='(')
			{
				s2[j++]=Popc(&st1);
			}
			Popc(&st1);		//将'('出栈 
		}
		i++;
	}
	while(st1.top>=0)		//将栈内剩余的运算符依次退栈输出 
	{
		s2[j++]=Popc(&st1);
	}
	s2[j]='\0';
}
 
//表达式求值 
double Calculate(char *s1)
{
	int i=0;
	int flag;				//char类型转换为double类型数据标记 
	double data1,data2;
	double sum;
	dStack ds1;
	Initd(&ds1);
	while(s1[i]!='\0')
	{
		if(s1[i]=='+'||s1[i]=='-'||s1[i]=='*'||s1[i]=='/')			//若为运算符获取栈顶两个元素进行计算 
		{
			data1=Popd(&ds1);
			data2=Popd(&ds1);
			if(s1[i]=='+') Pushd(&ds1,data2+data1);
			else if(s1[i]=='-') Pushd(&ds1,data2-data1);
			else if(s1[i]=='*') Pushd(&ds1,data2*data1);
			else if(s1[i]=='/') Pushd(&ds1,data2/data1);
		}
		else							//为数据时转化为double类型压栈 
		{
			flag=0;					//初始化为0为整数部分标记，1为小数部分标记 
			sum=0;
			double divider=1;
			while(s1[i]!=' '&&s1[i]!='+'&&s1[i]!='-'&&s1[i]!='*'&&s1[i]!='/')
			{
				if(s1[i]=='.')		//若有小数点，进入小数转化模式 
				{
					flag=1;
					i++;
					continue;
				}
				if(flag==0)
				{
					sum=sum*10+(double)(s1[i]-'0');
				}
				else
				{
					divider=divider*10;
					sum=sum+((double)(s1[i]-'0'))/divider;
				}
				i++;
			}
			if(s1[i]=='+'||s1[i]=='-'||s1[i]=='*'||s1[i]=='/') i--;	//转化成功一个数据，若下个字符为运算符，则i--，回到当前运算的数据位置 
			Pushd(&ds1,sum);
		}
		i++;		//i++准备下一个字符的转换 
	}
	 return Popd(&ds1);
}


6.面向对象问题
#include<iostream>
#include <math.h>
using namespace std;

class vehicle
{
protected:
int wheels;
int weight;
public:
vehicle(int wh, int we)
{
wheels = wh;
weight = we;
}
void disp()
{
cout << "wheels=" << wheels << ",weight=" << weight << endl;
}

};
class car:private vehicle
{
int passenger_load;
public:
car(int wh, int we, int pa) :vehicle(wh,we)
{
passenger_load = pa;
}
void disp()
{
vehicle::disp();
cout << "passenger_load=" << passenger_load << endl;
}

};
class truck :private vehicle
{
int passenger_load;
int payload;
public:
truck(int wh, int we, int pa,int pay) :vehicle(wh, we)
{
passenger_load = pa;
payload = pay;
}
void disp()
{
vehicle::disp();
cout << "passenger_load=" << passenger_load << "payload=" << payload << endl;
}

};

void main()
{
vehicle v(10, 20);
v.disp();

car c(4, 2, 5);
c.disp();

truck t(10, 15, 2, 5);
t.disp();

system("pause");
}





