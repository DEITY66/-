int fun1(a,b)
{
  int c=0;
  if(a<10||a>99)
     printf("输入的第一个数不是两位数\n");
  else if(b<10||b>99)
     printf("输入的第二个数不是两位数\n");
  else c=(a/10)*10+(a%10)*1000+(b/10)*1+(b%10)*100;
  return c;
}
void fun3(int *a,int *b,int *c)
{
  if(*a<10||*a>99)
     printf("error\n");
  else if(*b<10||*b>99)
     printf("error\n");
  else *c=(*a/10)*10+(*a%10)*1000+(*b/10)*1+(*b%10)*100;
  return 0;
}
#include<stdio.h>
#include<stdlib.h>
main(void)
{
    int n,m,i,x,s;
    static int j=1;
    int *p;
    scanf("%d%d",&n,&m);
    p=(int * )malloc(n * sizeof(int));
      for(i=0;i<n;i++)
       p[i]=1;
    for(i=0;i<n;i++)
   {
    s=0;
     for(x=0;x<n;x++)
    {
     if(p[x]!=0)
    {
        if(j == m)
      {
       p[x]=0;
       j=0;
      }
      j++;
    }
     s+=p[x];
   }
     if(s==1)
     break;
  }
   for(i=0;i<n;i++)
   if(p[i]!=0)
   printf("%d\n",i+1);
}
#include <stdio.h>
struct student
  {
    int chinese;
    int math;
    int English;
    int num;
    int score;
  };
int main()
{
  int n,i,j,k;
  scanf("%d",&n);
  struct student STU[n];
  for(i=0;i<n;i++)
  {
    scanf("%d%d%d",&STU[i].chinese,&STU[i].math,&STU[i].English);
    STU[i].num=i+1;
    STU[i].score=STU[i].chinese+STU[i].math+STU[i].English;
  }
  struct student max;
  for(i=0;i<n;i++)
 {
     for(j=0;j<n-i;j++)
     {
      if(STU[j+1].score>STU[j].score)
        {
        max.score=STU[j].score;
        STU[j].score=STU[j+1].score;
        STU[j+1].score=max.score;

        max.chinese=STU[j].chinese;
        STU[j].chinese=STU[j+1].chinese;
        STU[j+1].chinese=max.chinese;

        max.math=STU[j].math;
        STU[j].math=STU[j+1].math;
        STU[j+1].math=max.math;

        max.English=STU[j].English;
        STU[j].English=STU[j+1].English;
        STU[j+1].English=max.English;

        max.num=STU[j].num;
        STU[j].num=STU[j+1].num;
        STU[j+1].num=max.num;
      }
   }
 }
 for(i=0;i<n;i++)
 {
     for(j=0;j<n-i;j++)
     {
      if(STU[j+1].score==STU[j].score)
      {
        if(STU[j+1].chinese>STU[j].chinese)
        {
        max.score=STU[j].score;
        STU[j].score=STU[j+1].score;
        STU[j+1].score=max.score;

        max.chinese=STU[j].chinese;
        STU[j].chinese=STU[j+1].chinese;
        STU[j+1].chinese=max.chinese;

        max.math=STU[j].math;
        STU[j].math=STU[j+1].math;
        STU[j+1].math=max.math;

        max.English=STU[j].English;
        STU[j].English=STU[j+1].English;
        STU[j+1].English=max.English;

        max.num=STU[j].num;
        STU[j].num=STU[j+1].num;
        STU[j+1].num=max.num;
        }
      }
     }
 }
  for(i=0;i<n;i++)
 {
     for(j=0;j<n-i;j++)
   {
       if((STU[j+1].score==STU[j].score)&&(STU[j+1].chinese==STU[j].chinese))
    {
      if(STU[j+1].num<STU[j].num)
      {
        max.score=STU[j].score;
        STU[j].score=STU[j+1].score;
        STU[j+1].score=max.score;

        max.chinese=STU[j].chinese;
        STU[j].chinese=STU[j+1].chinese;
        STU[j+1].chinese=max.chinese;

        max.math=STU[j].math;
        STU[j].math=STU[j+1].math;
        STU[j+1].math=max.math;

        max.English=STU[j].English;
        STU[j].English=STU[j+1].English;
        STU[j+1].English=max.English;

        max.num=STU[j].num;
        STU[j].num=STU[j+1].num;
        STU[j+1].num=max.num;
      }
    }
   }
 }
  for(i=1;i<6;i++)
  {
      printf("%d %d",STU[i].num,STU[i].score);
      printf("\n");
  }
    return 0;
}
#include <stdio.h>
#include <string.h>
 int main()
{
  int n,m,i,j,N;
  scanf("%d %d",&m,&n);
  char a[n][m];
  for(i=0;i<n;i++)
{
  scanf("%s",a[i]);
}
  scanf("%d",&N);
//病毒计数
int A[100],B[100],k,sum,b,c;
int P;
for(P=0;P<N;P++)
 {
    k=sum=b=c=0;
    for(i=0;i<n;i++)
        for(j=0;j<m;j++)
    {
       if (a[i][j]=='X')
       {
         A[k]=i;
         B[k]=j;
         sum++; k++;
       }
    }
//感染模拟
   for(i=0;i<sum;i++)
   {
     b=A[i];c=B[i];
     if(a[b-1][c]=='O'&&b-1>-1)
        a[b-1][c]='X';
     if(a[b+1][c]=='O'&&b+1<10)
        a[b+1][c]='X';
     if(a[b][c-1]=='O'&&c-1>-1)
        a[b][c-1]='X';
     if(a[b][c+1]=='O'&&c+1<4)
        a[b][c+1]='X';
   }
 }
//输出结果
   for(i=0;i<n;i++)
 {
    for(j=0;j<m;j++)
  {
    putchar(a[i][j]);
  }
    printf("\n");
}
    return 0;
}
#include<iostream>
#include<cctype>
using namespace std;
#define STACK_SIZE 64 /*栈大小*/
#define TOP_OF_STACK -1 /*栈顶位置*/
typedef int ElementType; /*栈元素类型*/

#define SUCCESS 0
#define FAILURE -1

/*定义栈结构*/
typedef struct StackInfo
{
    int topOfStack; /*记录栈顶位置*/
    ElementType stack[STACK_SIZE]; /*栈数组，也可以使用动态数组实现*/
}StackInfo_st;


/*函数声明*/
int stack_push(StackInfo_st *s,ElementType value);
int stack_pop(StackInfo_st *s,ElementType *value);
int stack_top(StackInfo_st *s,ElementType *value);
int stack_is_full(StackInfo_st *s);
int stack_is_empty(StackInfo_st *s);


/*入栈，0表示成，非0表示出错*/
int stack_push(StackInfo_st *s,ElementType value)
{
    if(stack_is_full(s))
        return FAILURE;
    /*先增加topOfStack，再赋值*/
    s->topOfStack++;
    s->stack[s->topOfStack] = value;
    return SUCCESS;
}

/*出栈*/
int stack_pop(StackInfo_st *s,ElementType *value)
{
 /*首先判断栈是否为空*/
    if(stack_is_empty(s))
        return FAILURE;
    *value = s->stack[s->topOfStack];
    s->topOfStack--;
    return SUCCESS;
}
/*访问栈顶元素*/
int stack_top(StackInfo_st *s,ElementType *value)
{
    /*首先判断栈是否为空*/
    if(stack_is_empty(s))
    {

            return FAILURE;
    }
    *value = s->stack[s->topOfStack];
    return SUCCESS;
}

/*判断栈是否已满，满返回1，未满返回0*/
int stack_is_full(StackInfo_st *s)
{
    return s->topOfStack == STACK_SIZE - 1;
}
/*判断栈是否为空，空返回1，非空返回0*/
int stack_is_empty(StackInfo_st *s)
{
    return s->topOfStack == - 1;
}

/*用于记录符号的优先级，这里浪费了一些内存，可以优化*/
static char priority[128] = {0};
void priorityInit()
{
    /*初始化优先级，值越小，优先级越高*/
    priority['+'] = 4;
    priority['-'] = 4;
    priority['*'] = 3;
    priority['/'] = 3;
    priority['('] = 1;
    priority[')'] = 1;


}
/*比较运算符的优先级,op1优先级大于op2时，返回大于0的值*/
int priorityCompare(char op1,char op2)
{
    return priority[op2] - priority[op1];
}
/*出栈操作符和操作数进行计算*/
int calcOp(StackInfo_st *nums,StackInfo_st *ops,int nowOp)
{
    int a ,b,op;
    stack_pop(ops,&op);

    if(SUCCESS != stack_pop(nums,&b))
    {

        return -1;
    }
    if(SUCCESS != stack_pop(nums,&a))
    {

        return 0;
    }



    switch(op)
    {
        case '+':
        {

            stack_push(nums,a+b);
            break;
        }
        case '-':
        {
            stack_push(nums,a-b);
            break;
        }
        case '*':
        {

            stack_push(nums,a*b);
            break;
        }
        case '/':
        {

            stack_push(nums,a/b);
            break;
        }
    }
    return 1;
}
int calc(const char* exp,int *result)
{
    if(NULL == exp || NULL == result)
        return FAILURE;
    /*创建栈，用于保存数*/
    StackInfo_st nums;
    nums.topOfStack = TOP_OF_STACK;

    /*用于保存操作符*/
    StackInfo_st ops;
    ops.topOfStack = TOP_OF_STACK;
    int index = 0;
    /*用于标记，判断上一个是否为数字*/
    int flag = 0;
    int temp = 0;
    int op ;
    while(0 != *exp)
    {
        /*如果是数字*/
        if(isdigit(*exp))
        {

             /*如果上一个还是数字，则取出栈顶数据*/
            if(1 == flag)
               {

                stack_pop(&nums,&temp);

                }
            else
                temp = 0;
            flag = 1;
            temp = 10 * temp + *exp-'0';

            stack_push(&nums,temp);
        }
        /*如果是操作符*/
        else if('/' == *exp || '*' == *exp || '+' == *exp || '-' == *exp)
        {
            flag = 0;

            while((ops.topOfStack > TOP_OF_STACK )&&(SUCCESS == stack_top(&ops,&op))&&'(' != op && ')'!=op&&(priorityCompare(*exp,op) <= 0))
            {
                calcOp(&nums, &ops,*exp);
            }

            stack_push(&ops,*exp);
        }
        /*左括号直接入栈*/
        else if('(' == *exp )
        {

            flag = 0;
            stack_push(&ops,*exp);
        }
        /*右括号，计算*/
        else if(')' ==*exp )
        {

            flag = 0;
            /*右括号时，不断计算，直到遇见左括号*/
            while(SUCCESS == stack_top(&ops,&op) && '(' != op)
            {
                calcOp(&nums, &ops,*exp);
            }
            stack_pop(&ops,&op);
        }
        else
        {
            flag=0;
        }

        exp++;
    }
    while((!stack_is_empty(&ops)) && (!stack_is_empty(&nums)))
    {
        if(!calcOp(&nums, &ops,0));

    }
    stack_pop(&nums,&temp);
    if((!stack_is_empty(&ops)) || (!stack_is_empty(&nums)));


    if(SUCCESS == stack_pop(&nums,&temp));

    *result = temp;
     return 0;
}
int main()
{

    int result;
    priorityInit();
    char exp[20];
	cin>>exp;
    calc(exp,&result);
    cout<<result<<endl;
    return 0;
}
#include<iostream>
using namespace std;
class vehicel
{
	protected:
		int wheels;
		int weight;

	public:
	//	~vehicel(){};
		vehicel(int Wheels,int Weight) {
		wheels=Wheels;
		weight=Weight;
};

		void display(){
			cout<<"vehicel:"<<endl<<"wheels: "<<wheels<<"  weight: "<<weight<<endl;
		}
};

class car: private vehicel{
	protected:
		int passeger_load;
	public:
		car(int Wheels,int Weight,int PASSEGER):vehicel(Wheels, Weight){ //×¢Òâµ÷ÓÃ·½Ê½
			passeger_load=PASSEGER;
		}
		void Display(){
			cout<<"car: "<<endl<<"wheels: "<<wheels<<" weight: "<<weight<<" passeger load: "<<passeger_load<<endl;
		}
};

class truck: private vehicel{
	protected:
		int passeger_load;
		int payload;
	public:
		truck(int Wheels,int Weight,int PASSEGER,int PAYLOAD ):vehicel(Wheels, Weight){
			passeger_load=PASSEGER;  payload=PAYLOAD;
		}
	void Display(){
		cout<<"truck: "<<endl<<"wheels: "<<wheels<<" weight: "<<weight<<" passeger load: "<<passeger_load
		<<" payload: "<<payload<<endl;
	}
};


int main(){
	vehicel VEHICEL(10,7000);
	VEHICEL.display ();

	car CAR(5,3000,20);
	CAR.Display();

	truck TRUCK(4,10000,4,50000);
	TRUCK.Display() ;
	return 0 ;
}
